#!/usr/bin/env ruby

require 'bundler/setup'
require 'open-uri'
require 'logger'
require 'pry'

class WebCounterServer
  def self.logger
    @logger ||= Logger.new($stdout)
  end

  def initialize(host:, port:, &block)
    @host = host
    @port = port
  end

  def start(&block)
    trap('INT') { on_exit }

    # リクエストの受付開始
    logger.info("Listening on tcp://#{@host}:#{@port}")
    server = TCPServer.new(@host, @port)

    run(server, &block)
  end

  private

  def run(server, &block)
    loop do
      # リクエストが来たら
      socket = server.accept_nonblock

      # レスポンスを返す
      serve(socket, &block)
    rescue IO::WaitReadable, Errno::EINTR
      IO.select([server])
      retry
    end
  end

  def serve(socket, &block)
    # IOの準備完了を待つ
    socket.to_io.wait_readable(0.5)

    # レスポンスを返す
    response = block.call
    logger.info("Response #{response}")
    socket.write(response)
  rescue => error
    logger.error "#{error.message} #{error.backtrace}"
  ensure
    socket.close
  end

  def logger
    self.class.logger
  end

  # https://bugs.ruby-lang.org/issues/7917
  def on_exit
    Thread.new {
      puts ""
      logger.info('Goodbye!')
      exit
    }.join
  end
end

def use_cpu_and_io(count)
  # IOを使う
  OpenURI.open_uri("https://www.google.com/search?q=#{count}").read

  # CPUを使い切る
  i = 0
  while i < 10_000_000; i += 1 end
end

counter = 0

WebCounterServer.new(host: '127.0.0.1', port: '8080').start do
  # CPUとIOをいい感じに使う処理を書く
  use_cpu_and_io(counter)

  counter += 1
  body = counter.to_s

  <<~RESPONSE
  HTTP/1.1 200 OK
  Content-Length: #{body.bytesize}
  Content-Type: text/plain; charset=utf-8

  #{body}
  RESPONSE
end
